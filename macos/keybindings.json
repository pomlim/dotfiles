// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "cmd+h",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "cmd+j",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "cmd+k",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "shift+cmd+]",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "cmd+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "cmd+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "f1",
    "command": "-workbench.action.showCommands"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeWindow",
    "when": "!editorIsOpen && !multipleEditorGroups"
  },
  {
    "key": "cmd+w",
    "command": "-workbench.action.closeWindow",
    "when": "!editorIsOpen && !multipleEditorGroups"
  },
  {
    "key": "ctrl+[",
    "command": "workbench.action.closeSidebar"
  },
  {
    "key": "ctrl+cmd+m",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.switchWindow"
  },
  {
    "key": "cmd+f",
    "command": "workbench.action.quickOpen"
  },
  /*  VSCode attempt to emulate https://github.com/terryma/vim-multiple-cursors */
  // Use built in VSCode pattern matcher for entire word search (ctrl + n)
  {
    "key": "ctrl+cmd+n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "vim.mode == 'Visual' || !inDebugRepl && vim.mode == 'VisualBlock' || editorFocus && vim.active && vim.mode == 'Normal'"
  },
  // Skip current match (ctrl + x)
  {
    "key": "ctrl+cmd+x",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "vim.active && editorFocus && vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualBlock' && !inDebugRepl"
  },
  // Go back to previous match (ctrl + p)
  {
    "key": "ctrl+cmd+p",
    "command": "editor.action.moveSelectionToPreviousFindMatch",
    "when": "vim.active && editorFocus && vim.mode == 'Visual' || vim.mode == 'VisualBlock' && !inDebugRepl"
  },
  // Select all matches (ctrl + a). This is effectively the same as (ctrl + shift + l)
  {
    "key": "ctrl+cmd+i",
    "command": "editor.action.selectHighlights",
    "when": "vim.active && editorFocus && vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualBlock' && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "explorer.download"
  },
  {
    "key": "cmd+ctrl+e",
    "command": "workbench.view.explorer"
  },
  {
    "key": "ctrl+cmd+'",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+cmd+n",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+cmd+p",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "ctrl+cmd+b",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+cmd+d",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+cmd+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+m",
    "command": "notifications.clearAll"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openFile",
    "when": "false"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openLocalFileFolder",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "cmd+o",
    "command": "workbench.action.gotoSymbol"
  },
  {
    "key": "cmd+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+/",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+cmd+h",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "key": "ctrl+cmd+l",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "ctrl+cmd+l",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+cmd+j",
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  {
    "key": "ctrl+cmd+k",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "key": "cmd+l",
    "command": "-expandLineSelection",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+l",
    "command": "workbench.action.focusNextGroup"
  },
  {
    "key": "ctrl+o",
    "command": "-lineBreakInsert",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+o",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "o",
    "command": "-list.toggleExpand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+cmd+]",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+s",
    "command": "list.find",
    "when": "listFocus && listSupportsFind"
  },
  {
    "key": "ctrl+f",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "l",
    "command": "-list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+d",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
  },
  {
    "key": "cmd+down",
    "command": "-list.scrollDown",
    "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
  },
  {
    "key": "ctrl+u",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
  },
  {
    "key": "cmd+up",
    "command": "-list.scrollUp",
    "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
  },
  {
    "key": "shift+cmd+,",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "g g",
    "command": "-list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "shift+cmd+.",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "shift+g",
    "command": "-list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "cmd+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "cmd+down",
    "command": "-search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "cmd+n",
    "command": "search.action.focusSearchList"
  },
  {
    "key": "cmd+n",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "shift+cmd+enter",
    "command": "-list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+b",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "-list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "-list.focusUp",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "k",
    "command": "-list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+[",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "escape",
    "command": "-list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "ctrl+l",
    "command": "togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "cmd+k f2",
    "command": "-togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+c",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.openSettings"
  },
  {
    "key": "cmd+,",
    "command": "-workbench.action.openSettings"
  },
]